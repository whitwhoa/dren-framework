<?php

/////////////////////////////////////////////////////////////////////////////////////////
// For development. Comment these out for production
/////////////////////////////////////////////////////////////////////////////////////////
//ini_set('display_errors', 1);
//ini_set('display_startup_errors', 1);
//error_reporting(E_ALL);
//ini_set('log_errors', 1);
//ini_set('error_log', '/var/www/dren-example/job_errors.log');
/////////////////////////////////////////////////////////////////////////////////////////

$privateDirectory = __DIR__;
require $privateDirectory . '/vendor/autoload.php';

use Dren\App;
use Dren\DAOs\JobDAO;
use Dren\JobExecutor;

if ($argc < 2 || !is_numeric($argv[1]))
    die("Must provide an integer argument.\n");

$workerId = (int)$argv[1];

App::initCli($privateDirectory);
$jobExecutor = new JobExecutor();
$jobDao = new JobDAO();

while (true)
{
    try
    {
        // check if I should kill myself
        if(file_exists($privateDirectory . '/storage/system/queue/stopworkers'))
            break;

        $queuedJobs = $jobDao->getQueuedJobs($workerId);

        foreach($queuedJobs as $j)
        {
            $className = $jobExecutor->verifyClassName($j->name);
            if($className === false)
                throw new Exception('Invalid class name provided for job in worker queue');

            $jobData = $j->data !== null ? json_decode($j->data) : null;

            $job = new $className($jobData);

            // we delete the job from the jobQueue now, because at this point it will show up as a failed execution
            // in the job_executions table if something were to go awry
            $jobDao->deleteJobQueue($j->id);

            if($job->isConcurrent())
                $jobExecutor->runConcurrent($job);
            else
                $jobExecutor->runSequential($job);
        }
    }
    catch(Exception $e)
    {
        $jobExecutor->handleJobFailure($e->getMessage() . ":" . $e->getTraceAsString());
    }

    sleep(10);
}